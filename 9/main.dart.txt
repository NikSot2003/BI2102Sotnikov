import 'package:flutter/material.dart';
import 'Machine.dart';  // Импортируем класс Machine, который управляет ресурсами кофемашины

void main() => runApp(const MyApp());  // Запуск приложения через MyApp

class MyApp extends StatelessWidget {
  const MyApp({super.key});  // Конструктор для MyApp, использующий ключ

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Кофемашина',  // Заголовок приложения
      theme: ThemeData(
        primarySwatch: Colors.brown,  // Цветовая схема - коричневый
        textTheme: const TextTheme(bodyMedium: TextStyle(fontSize: 18)),  // Стиль текста
        elevatedButtonTheme: ElevatedButtonThemeData(
          style: ElevatedButton.styleFrom(
            primary: Color.fromARGB(255, 89, 26, 3),  // Цвет кнопок
            onPrimary: Color.fromARGB(255, 197, 191, 191),  // Цвет текста на кнопках
            padding: const EdgeInsets.symmetric(horizontal: 20, vertical: 15),  // Отступы на кнопках
            elevation: 5,  // Тень на кнопках
            shadowColor: Colors.black.withOpacity(0.2),  // Цвет тени
            shape: RoundedRectangleBorder(
              borderRadius: BorderRadius.circular(12),  // Скругленные углы
            ),
          ),
        ),
      ),
      home: const CoffeeHomePage(),  // Главная страница приложения
      debugShowCheckedModeBanner: false,  // Отключаем баннер отладки
    );
  }
}

class CoffeeHomePage extends StatefulWidget {
  const CoffeeHomePage({super.key});  // Конструктор страницы кофемашины

  @override
  State<CoffeeHomePage> createState() => _CoffeeHomePageState();  // Создаем состояние страницы
}

class _CoffeeHomePageState extends State<CoffeeHomePage> {
  final Machine machine = Machine();  // Экземпляр кофемашины для управления ресурсами
  String status = 'Готов к работе!';  // Начальный статус кофемашины

  // Функция для приготовления эспрессо
  void _makeEspresso() {
    setState(() {
      status = machine.makeEspresso()  // Проверяем, можем ли мы приготовить эспрессо
          ? 'Эспрессо готов! Цена: \$2.5'  // Если успешно, выводим сообщение с ценой
          : 'Недостаточно ресурсов!';  // Если ресурсов не хватает, выводим предупреждение
    });
  }

  // Функция для приготовления капучино
  void _makeCappuccino() {
    setState(() {
      status = machine.makeCappuccino()  // Проверяем, можем ли мы приготовить капучино
          ? 'Капучино готов! Цена: \$3.0'  // Если успешно, выводим сообщение с ценой
          : 'Недостаточно ресурсов!';  // Если ресурсов не хватает, выводим предупреждение
    });
  }

  // Функция для приготовления латте
  void _makeLatte() {
    setState(() {
      status = machine.makeLatte()  // Проверяем, можем ли мы приготовить латте
          ? 'Латте готов! Цена: \$3.5'  // Если успешно, выводим сообщение с ценой
          : 'Недостаточно ресурсов!';  // Если ресурсов не хватает, выводим предупреждение
    });
  }

  // Функция для добавления ресурсов
  void _addResources() {
    setState(() {
      machine.water += 300;  // Добавляем воду
      machine.coffeeBeans += 150;  // Добавляем зёрна
      machine.milk += 100;  // Добавляем молоко
      status = 'Ресурсы добавлены!';  // Обновляем статус
    });
  }

  // Функция для обнуления кассы
  void _resetCash() {
    setState(() {
      machine.cash = 0;  // Обнуляем деньги в кассе
      status = 'Касса обнулена!';  // Обновляем статус
    });
  }

  // Функция для отображения текущего статуса кофемашины
  void _showStatus() {
    setState(() {
      status = machine.getStatus();  // Получаем статус кофемашины
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Кофемашина'),  // Заголовок на панели приложения
        backgroundColor: Colors.brown[700],  // Цвет фона панели
      ),
      body: Padding(
        padding: const EdgeInsets.all(24.0),  // Отступы по всему экрану
        child: Column(
          children: [
            // Информация о начальных ресурсах
            Container(
              padding: const EdgeInsets.all(16),
              decoration: BoxDecoration(
                color: Colors.blue[50],  // Цвет фона контейнера
                borderRadius: BorderRadius.circular(10),  // Скругленные углы
                border: Border.all(color: Colors.blue, width: 2),  // Синий бордер
              ),
              child: Column(
                children: [
                  Text(
                    'Ресурсы:',
                    style: const TextStyle(fontSize: 18, fontWeight: FontWeight.bold),  // Стиль текста
                  ),
                  const SizedBox(height: 10),  // Отступ между текстом и информацией о ресурсах
                  Text(
                    'Вода: ${machine.water} мл',  // Количество воды
                    style: const TextStyle(fontSize: 16),
                  ),
                  Text(
                    'Зёрна: ${machine.coffeeBeans} г',  // Количество зёрен
                    style: const TextStyle(fontSize: 16),
                  ),
                  Text(
                    'Молоко: ${machine.milk} мл',  // Количество молока
                    style: const TextStyle(fontSize: 16),
                  ),
                ],
              ),
            ),
            const SizedBox(height: 10),  // Отступ между ресурсами и статусом

            // Статус кофемашины
            Text(
              status,
              style: const TextStyle(
                fontSize: 24,  // Размер шрифта
                fontWeight: FontWeight.bold,  // Жирный шрифт
                color: Colors.green,  // Зеленый цвет текста
              ),
              textAlign: TextAlign.center,  // Выравнивание текста по центру
            ),
            const SizedBox(height: 20),  // Отступ между статусом и кнопками выбора напитков

            // Выбор напитков
            Expanded(
              child: Center(
                child: Wrap(
                  spacing: 12,  // Расстояние между кнопками
                  runSpacing: 12,  // Расстояние между рядами кнопок
                  alignment: WrapAlignment.center,  // Выравнивание по центру
                  children: [
                    _buildDrinkButton(  // Кнопка для приготовления Эспрессо
                      'Эспрессо',
                      2.5,
                      _makeEspresso,
                      waterNeeded: 50,
                      beansNeeded: 20,
                      milkNeeded: 0,
                    ),
                    _buildDrinkButton(  // Кнопка для приготовления Капучино
                      'Капучино',
                      3.0,
                      _makeCappuccino,
                      waterNeeded: 100,
                      beansNeeded: 20,
                      milkNeeded: 50,
                    ),
                    _buildDrinkButton(  // Кнопка для приготовления Латте
                      'Латте',
                      3.5,
                      _makeLatte,
                      waterNeeded: 100,
                      beansNeeded: 20,
                      milkNeeded: 100,
                    ),
                  ],
                ),
              ),
            ),
            const SizedBox(height: 10),  // Отступ между кнопками напитков и дополнительными кнопками

            // Дополнительные кнопки действий
            Column(
              children: [
                _buildActionButton('Пополнить', _addResources),  // Кнопка для добавления ресурсов
                const SizedBox(height: 10),
                _buildActionButton('Обнулить кассу', _resetCash),  // Кнопка для обнуления кассы
                const SizedBox(height: 10),
                _buildActionButton('Статус', _showStatus),  // Кнопка для отображения статуса
              ],
            ),
            const SizedBox(height: 20),  // Отступ перед выводом общей суммы

            // Вывод общей суммы в кассе
            Container(
              padding: const EdgeInsets.all(16),
              decoration: BoxDecoration(
                color: Colors.orange[50],  // Цвет фона контейнера
                borderRadius: BorderRadius.circular(10),  // Скругленные углы
                border: Border.all(color: Colors.orange, width: 2),  // Оранжевый бордер
              ),
              child: Text(
                'Общая сумма в кассе: \$${machine.cash.toStringAsFixed(2)}',  // Отображаем сумму в кассе
                style: const TextStyle(
                  fontSize: 20,  // Размер шрифта
                  fontWeight: FontWeight.bold,  // Жирный шрифт
                  color: Colors.orange,  // Оранжевый цвет текста
                ),
                textAlign: TextAlign.center,  // Выравнивание по центру
              ),
            ),
          ],
        ),
      ),
    );
  }

  // Метод для создания кнопки действия
  Widget _buildActionButton(String label, VoidCallback onPressed) {
    return ElevatedButton(
      onPressed: onPressed,  // Действие при нажатии
      child: Text(label),  // Текст кнопки
      style: ElevatedButton.styleFrom(
        padding: const EdgeInsets.symmetric(horizontal: 30, vertical: 15),  // Отступы
        minimumSize: const Size(200, 60),  // Минимальный размер кнопки
      ),
    );
  }

  // Метод для создания кнопки напитка
  Widget _buildDrinkButton(
    String name,
    double price,
    VoidCallback onPressed, {
    required int waterNeeded,
    required int beansNeeded,
    required int milkNeeded,
  }) {
    return Column(
      children: [
        ElevatedButton(
          onPressed: onPressed,  // Действие при нажатии
          child: Text(name),  // Название напитка
        ),
        const SizedBox(height: 8),
        // Информация о цене напитка
        Container(
          padding: const EdgeInsets.all(8),
          decoration: BoxDecoration(
            color: Colors.brown[50],  // Цвет фона
            borderRadius: BorderRadius.circular(8),  // Скругленные углы
            border: Border.all(color: Colors.brown, width: 1),  // Коричневый бордер
          ),
          child: Text(
            'Цена: \$${price.toStringAsFixed(2)}',  // Отображаем цену
            style: const TextStyle(
              fontSize: 16,
              color: Colors.brown,  // Коричневый цвет текста
              fontWeight: FontWeight.w500,  // Средний вес шрифта
            ),
          ),
        ),
        const SizedBox(height: 8),
        // Информация о необходимых ресурсах для напитка
        Container(
          padding: const EdgeInsets.all(8),
          decoration: BoxDecoration(
            color: Colors.grey[100],  // Цвет фона
            borderRadius: BorderRadius.circular(8),  // Скругленные углы
            border: Border.all(color: Colors.grey, width: 1),  // Серый бордер
          ),
          child: Text(
            'Необходимые ресурсы:\n'
            'Вода: ${waterNeeded} мл\n'
            'Зёрна: ${beansNeeded} г\n'
            'Молоко: ${milkNeeded} мл',
            style: const TextStyle(fontSize: 14, color: Colors.black),  // Стиль текста
            textAlign: TextAlign.center,  // Выравнивание текста по центру
          ),
        ),
      ],
    );
  }
}
